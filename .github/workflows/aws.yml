name: Deploy Docker Image to Amazon ECS

on:
  workflow_dispatch:
  # push:
  #   branches: [ "main" ]


permissions:
  contents: read

jobs:  
#   docker:
#     runs-on: ubuntu-latest
#     steps:
#       - 
#         name: Checkout
#         uses: actions/checkout@v3
#       -
#         name: Set up QEMU
#         uses: docker/setup-qemu-action@v3
#       -
#         name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3
#       -
#         name: Login to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}
#       -
#         name: Build and push
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           push: true
#           tags: |
#             wailinoo/node:${{ github.run_id }}
#             wailinoo/node:latest


  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t ${{ vars.ECR_REGISTRY }}/${{vars.ECR_REPOSITORY}}:${{github.run_id}} .
        docker push ${{ vars.ECR_REGISTRY }}/${{vars.ECR_REPOSITORY}}:${{github.run_id}}
        echo "image=${{ vars.ECR_REGISTRY }}/${{vars.ECR_REPOSITORY}}:${{github.run_id}}" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ vars.ECS_TASK_DEFINITION }} 
        container-name: ${{ vars.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ vars.ECS_SERVICE }}
        cluster: ${{ vars.ECS_CLUSTER }}
        wait-for-service-stability: true
